jQuery(document).ready( function($) {
	// a counter for repeats
	var repeat_instance = $('.repeat').length;

	// buttons (edit, repeat) are siblings with date editor
	// delete, save, cancel are children of date editor

	// edit function
	function bind_edit(e) {
		// only if date editor is hidden
		if ($(this).siblings('.mem-date-select').is(":hidden")) {
			date_select = $(this).siblings('.mem-date-select');

			// Fill in current date if empty
			current_date = new Date();
			if (date_select.find('.aa').val() == '') {
				date_select.find('.aa').val(current_date.getFullYear());
				date_select.find('.jj').val(current_date.getDate());
				// getMonth returns 0-11 values
				month = current_date.getMonth() + 1;
				if (month < 10)
					// zeroize eg. 02
					month = '0' + month;
				date_select.find('.mm').val(month);
				// only the month is a select, other fields are inputs,
				// so we need to make sure month is proper selected
				date_select.find('option[value="' + month + '"]').attr('selected','selected');
			}

			date_select.slideDown('fast');
			$(this).hide();
		}
		e.preventDefault();
	}

	// save function
	function bind_save(e) {
		date_select = $(this).parents('.mem-date-select');
		// only if there is a change
		if ( date_select.update_label_and_validate() ) {
			$(this).parents('.mem-date-select').slideUp('fast');
			$('.mem-date-select').siblings('a.mem-edit-timestamp').show();
			// stores the current values (new values) into a js object
			// used later for cancel
			date_select.store_date_data();
			date_select.send_ajax('save');
		}
		e.preventDefault();
	}

	// delete function
	function bind_delete(e) {
		date_select = $(this).parents('.mem-date-select');
		date_select.store_date_data();
		date_select.slideUp('fast', function() {
			// deletes the data from fields
			date_select.remove_date();
		});

		date_select.send_ajax('delete');

		date_select.siblings('a.mem-edit-timestamp').show();
		date_select.siblings('a.mem-repeat-timestamp').hide();

		// delete the div altogether if we're in a Repeat
		if ( $(this).parents('.repeat').length ) {

			// a way to know what we deleted
			$(this).parents('.repeat').find('.old-value').clone().appendTo('#mem');

			$(this).parents('.repeat').remove();
		}

		// Remove all the repeats if we delete the start date
		if (date_select.find("input[name='start_aa']").length) {
			$('.repeat').remove();
		}
		e.preventDefault();
	}

	function bind_cancel(e) {
		date_select = $(this).parents('.mem-date-select');
		date_select.slideUp('fast', function() {
			date_select.cancel_date_changes();
		});

		$('.mem-date-select').siblings('a.mem-edit-timestamp').show();

		e.preventDefault();
	}

	// update or create total repeat counter
	function update_repeats() {
		// if the hidden counter is generated by php, just update it
		if ($('#total-repeats').length)
			$('#total-repeats').val(repeat_instance);
		else
			$('#mem').append("<input type='hidden' name='mem_total_repeats' value='" + repeat_instance + "' id='total-repeats' />");
		// #mem is the metabox wrapper
	}

	// ajax save/delete
	$.fn.send_ajax = function (mem_action) {

		var label = this.siblings('.date-label').html();
		// get the type from parent class name, striping the "misc-pub-section" from it
		var type = this.parent().attr('class').substr(17);
		var old_value = this.find("input[name^='repeat_old_value']").val();
		// wordpress generated a hidden field with post_ID
		var post_id = jQuery("#post_ID").val() || 0;

		// mem_action can be save or delete
		var data = {
			action:'mem_data',
			mem_action: mem_action,
			date:label,
			old_value:old_value,
			type:type,
			post_id:post_id
		};

		$.post(ajaxurl, data);

		return $(this);

	};

	// remove date values from fields
	$.fn.remove_date = function() {
		// mem_l10n is the object with translated strings generated by php
		$(this).siblings('.date-label').html(mem_l10n['not_set']);
		$('.mem-timestamp-wrap > *', this).val('');
		return $(this);
	};

	// reload original data in fields
	$.fn.cancel_date_changes = function() {
		original_data = $(this).data();
		for (var name in original_data){
			$(this).find('*[name=' + name + ']').val(original_data[name]);
		}
		// make sure we don't have a invalid class if no errors
		$(this).find('.mem-timestamp-wrap').removeClass('form-invalid');
		return $(this);
	};

	// store original data in an object
	$.fn.store_date_data = function() {
		date_select = $(this);
		$('.mem-timestamp-wrap > *', this).each(function(){
			date_select.data($(this).attr('name'), $(this).val());
		});

		// show the repeat button only if Start date has some data
		// start_aa holds the year, the only required field, or the alpha field
		// check this on every update
		if( $("input[name^='start_aa']").val() || $("input[name^='start_full-date-alpha']").val() ) {
			$('.mem-repeat-timestamp').show();
		} else
			$('.mem-repeat-timestamp').hide();
	};

	// update date label on change
	$.fn.update_label_and_validate = function() {
		var aa = $('.aa', this).val(),
			mm = $('.mm', this).val(),
			jj = $('.jj', this).val(),
			hh = $('.hh', this).val(),
			mn = $('.mn', this).val(),
			label,
			error = false,
			test_date;

		if (aa) {
			label = aa;
			test_date = new Date();
			test_date.setFullYear(aa);

			if ((aa != test_date.getFullYear()) || (aa < 1000))
				error = true;

			if (mm) {
				label = label + '-' + mm;
				// getMonth() returns 0-11, not 1-12
				// we generate a actual date composed by the year and month
				test_date = new Date(aa, mm -1);
				if (mm < 10)
					mm = '0' + mm;
				if (test_date.getMonth() != mm - 1)
					error = true;

				if (jj) {

					test_date = new Date(aa, mm -1, jj);
					jj = parseFloat(jj);
					if (jj < 10 )
						jj = '0' + jj;
					label =	label + '-' + jj;
					if (test_date.getDate() != jj)
						error = true;

					if (hh) {
						hh = parseFloat(hh);
						if (hh < 10 )
							hh = '0' + hh;
						label =	label + ' ' + hh;
						test_date = new Date(aa,mm -1,jj,hh);
						if (test_date.getHours() != hh)
							error = true;

						if (mn) {
							mn = parseFloat(mn);
							if (mn < 10 )
								mn = '0' + mn;

							test_date = new Date(aa, mm -1, jj, hh, mn);
							if (test_date.getMinutes() != mn)
								error = true;
							label =	label + ':' + mn;
						} else {
							label =	label + ':00';
							$('.mn', this).val('00');
						}
					} else {
						// no hour, but minutes completed
						if (mn)
							error = true;
					}
				} else {
					// no day, but or minutes or hours completed
					if ( hh || mn)
						error = true;
				}
			} else {
				// no month, but day or minutes or hours completed
				if (jj || hh || mn)
					error = true;
			}
		} else {
			// so aa is empty. let´s check if the field exists
			if ($('.aa', this).length == 0) {
				// aa doesn't exists. check alpha field
				if( $('.full-date-alpha', this).val() ) {
					// if we have some data in the alpha field, also change the label
					label = $('.full-date-alpha', this).val();
				} else {
					// no data in alpha field, no aa field - error
					error = true;
				}
			} else {
				// aa exists and it´s empty. ok. error
				error = true;
			}
		}

		$(this).siblings('.date-label').html(label);

		// validate double date after writing the label
		var label_counter = 0;
		$('.date-label').each(function(){
			if ($(this).text() == label) {
				label_counter++;
			}
		});
		if (label_counter > 1)
			error = true;

		if (error) {
			$(this).find('.mem-timestamp-wrap').addClass('form-invalid');
			return false;
		}

		// make sure we don't have a invalid class if no errors
		$(this).find('.mem-timestamp-wrap').removeClass('form-invalid');

		return true;
	};

	// run this only if submitdiv exists, so only on wp edit (post,page) screen
	if ( $('#submitdiv').length ) {

		// Store original data
		$('.mem-date-select').each(function() {
			$(this).store_date_data();
		});

		$('a.mem-edit-timestamp').click(bind_edit);

		$('a.mem-cancel-timestamp').click(bind_cancel);

		$('a.mem-delete-timestamp').click(bind_delete);

		$('a.mem-save-timestamp').click(bind_save);

		$('a.mem-repeat-timestamp').click(function (e) {
			var original, date_select, repeat, fields, ie8_selects, new_options;
			repeat_instance++;

			date_select = $('.start .mem-date-select');

			// get the original data, all the div with its contents
			original = $(this).parents('.misc-pub-section');

			// prevent repeat if no start date
			if ( date_select.update_label_and_validate() ) {

				// clone original data / repeat it
				repeat = original.clone().insertBefore('#mem .end');

				// change the label to a translatable 'Repeat'
				repeat.find('.date-title', this).html(mem_l10n['repeat'] + " #" + repeat_instance);

				repeat.removeClass('start');
				repeat.addClass('repeat');

				// remove the Repeat and Cancel buttons from the clone
				repeat.find('.mem-repeat-timestamp').remove();
				// repeat.find('.mem-cancel-timestamp').remove();
				// repeat.find('.mem-separator').remove();

				// find all duplicated fields
				fields = repeat.find("*[name^='start_']");

				//find selects to fix ie8 bug
				ie8_selects = original.find("select option:selected");

				// find cloned options to fix selected
				new_options = repeat.find("option");

				new_options.each(function() {
					if ( $(this).val() == ie8_selects.val()) {
						$(this).attr("selected", "selected");
					}
				});

				// change field names from start_* to repeat_*
				fields.each(function() {
					matches = $(this).attr('name').match('start(.*)');
					$(this).attr('name', 'repeat' + matches[1] + "_" + repeat_instance );
				});

				// if we don't have an old value, a new field will be added
				// pass empty old value on new created repeats
				repeat.find('.mem-timestamp-wrap').append('<input type="hidden" name="repeat_old_value_' + repeat_instance + '" value="" />');

				if (repeat.find('.mem-date-select').is(":hidden")) {
					repeat.find('.mem-date-select').slideDown('fast');
				}

				repeat.find('a.mem-edit-timestamp').click(bind_edit);
				repeat.find('a.mem-save-timestamp').click(bind_save);
				repeat.find('a.mem-cancel-timestamp').click(bind_cancel);

				repeat.find('a.mem-delete-timestamp').click(function() {
					// repeat was added and removed via js, no need to send it to db
					repeat_instance--;
					update_repeats();
					//console.log(this);
					$(this).parents('.mem-date-select').send_ajax('delete');
					repeat.remove();
				});

				update_repeats();
			}
			e.preventDefault();
		});
	} // end submitdiv

});